// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package req_dispatcher

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReqDispatcherClient is the client API for ReqDispatcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReqDispatcherClient interface {
	Dispatch(ctx context.Context, in *ReqDispatchRequest, opts ...grpc.CallOption) (*ReqDispatchReply, error)
}

type reqDispatcherClient struct {
	cc grpc.ClientConnInterface
}

func NewReqDispatcherClient(cc grpc.ClientConnInterface) ReqDispatcherClient {
	return &reqDispatcherClient{cc}
}

func (c *reqDispatcherClient) Dispatch(ctx context.Context, in *ReqDispatchRequest, opts ...grpc.CallOption) (*ReqDispatchReply, error) {
	out := new(ReqDispatchReply)
	err := c.cc.Invoke(ctx, "/req_dispatcher.ReqDispatcher/Dispatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReqDispatcherServer is the server API for ReqDispatcher service.
// All implementations must embed UnimplementedReqDispatcherServer
// for forward compatibility
type ReqDispatcherServer interface {
	Dispatch(context.Context, *ReqDispatchRequest) (*ReqDispatchReply, error)
	mustEmbedUnimplementedReqDispatcherServer()
}

// UnimplementedReqDispatcherServer must be embedded to have forward compatible implementations.
type UnimplementedReqDispatcherServer struct {
}

func (UnimplementedReqDispatcherServer) Dispatch(context.Context, *ReqDispatchRequest) (*ReqDispatchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dispatch not implemented")
}
func (UnimplementedReqDispatcherServer) mustEmbedUnimplementedReqDispatcherServer() {}

// UnsafeReqDispatcherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReqDispatcherServer will
// result in compilation errors.
type UnsafeReqDispatcherServer interface {
	mustEmbedUnimplementedReqDispatcherServer()
}

func RegisterReqDispatcherServer(s grpc.ServiceRegistrar, srv ReqDispatcherServer) {
	s.RegisterService(&ReqDispatcher_ServiceDesc, srv)
}

func _ReqDispatcher_Dispatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDispatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReqDispatcherServer).Dispatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/req_dispatcher.ReqDispatcher/Dispatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReqDispatcherServer).Dispatch(ctx, req.(*ReqDispatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReqDispatcher_ServiceDesc is the grpc.ServiceDesc for ReqDispatcher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReqDispatcher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "req_dispatcher.ReqDispatcher",
	HandlerType: (*ReqDispatcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Dispatch",
			Handler:    _ReqDispatcher_Dispatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "req_dispatcher/req_dispatcher.proto",
}
